{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","atr","maxLength","minLength","size","value","bit","id","index","name","className","key","type","required","onChange","event","newBit","binToNum","binary","sign","exponent","slice","split","reverse","reduce","acc","cur","i","Math","pow","mantissa","length","numToBin","number","arr","int","parseInt","dec","parseFloat","binSign","template","floor","nextInt","rest","push","concat","intToBin","binInt","templateBin","newDec","decToInt","binDec","templateDec","join","templateMan","findIndex","x","findExponent","binExp","Array","fill","map","adjustedBinDec","bitNum","App","integer","decimal","denormalized","state","this","indexOf","convert","displayBinary","explainToNum","explainToBits","newNumber","target","newBin","setState","RegExp","test","temp","bind","binExponent","binMantissa","explainExp","forEach","displayBinMan","explainMan","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82663a08.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Input(props: any) {\n  const atr: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement> = {\n    maxLength: 1,\n    minLength: 1,\n    size: 1,\n    value: props.bit === \" \" ? \"\" : props.bit,\n    id: `bit${props.index}`,\n    name: `${props.index}`,\n    className: props.index > 11 ? \"inputMantissa\" : props.index === 0 ? \"inputSign\" : \"inputExponent\",\n  };\n  return (\n    <input key={props.index} type=\"text\" required {...atr} onChange={event => props.newBit(event)}></input>\n  )\n}\n\nclass App extends React.Component<{}, {number: string, binary: string}> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      number: \"340.15\",\n      binary: \"\",\n    };\n  }\n\n  number: string = \"\";\n  binary: string = \"\";\n\n  binSign: string = \"\";\n  binInt: string = \"\";\n  binDec: string = \"\";\n\n  integer: string= \"\";\n  decimal: string = \"\";\n\n  exponent: string = \"\";\n  mantissa: string = \"\";\n\n  denormalized: boolean = false; // useless?\n\n\n  convert() {\n    let templateBin, templateDec, templateMan;\n    [this.number, this.binary] = [this.state.number, this.state.binary];\n    if (this.binary !== \"\" && this.binary.indexOf(\"1\") !== -1) {\n      [this.number, this.exponent, this.mantissa] = binToNum(this.binary);\n      [ , this.binSign, this.binInt, this.binDec, this.integer, this.decimal, templateBin, templateDec, templateMan] = numToBin(this.number);\n    } else {\n      [this.binary, this.binSign, this.binInt, this.binDec, this.integer, this.decimal, templateBin, templateDec, templateMan] = numToBin(this.number);\n      [ , this.exponent, this.mantissa] = binToNum(this.binary);\n    }\n    return [templateBin, templateDec, templateMan]\n  }\n\n  render() {\n    [this.number, this.binary, this.binSign, this.binInt, this.binDec, this.integer, this.decimal, this.exponent, this.mantissa] = [\"\", \"\", \"\", \"\", \"\", \"\" ,\"\" ,\"\" ,\"\"];\n    let [templateBin, templateDec, templateMan] = this.convert();\n    return (\n      <div>\n        <h1>64 bit IEEE-754 floating point format</h1>\n        <div id=\"bits\">\n          {this.displayBinary()}\n        </div>\n        <div id=\"explain\">\n          <div id=\"toNum\">\n            <h3>Bits to number conversion:</h3>\n            <div>{this.explainToNum()}</div>\n          </div>\n          <div id=\"toBits\">\n            <h3>Number to bits conversion:</h3>\n            <div>{this.explainToBits({templateBin, templateDec, templateMan})}</div>\n          </div>\n        </div>\n        <div id=\"number\">\n          <input id=\"numberInput\" type=\"text\" value={this.number} onChange={event => this.newNumber(event)}></input>\n        </div>\n      </div>\n    );\n  }\n\n  newBit(event: React.ChangeEvent<HTMLInputElement>) {\n    const index = ~~event.target.name;\n    const value = event.target.value;\n    const newBin = this.binary.split('');\n    newBin[index] = value === \"1\" || value === \"0\" ? value : newBin[index];\n    this.setState({\n      number: \"\",\n      binary: newBin.join(''),\n    })\n  }\n\n  newNumber(event: React.ChangeEvent<HTMLInputElement>) {\n    const regex = new RegExp('^-{0,1}[0-9]+(\\\\.{0,1}[0-9]+$|$)');\n    let number = regex.test(event.target.value) ? event.target.value : this.number;\n    this.setState({\n      number: number,\n      binary: \"\"\n    });\n  }\n\n  displayBinary() {\n    const temp = [];\n    for(let i = 0; i < this.binary.length; i++) {\n      temp.push(Input({index: i, bit: this.binary[i], newBit: this.newBit.bind(this)}));      \n    }\n    return temp;\n  }\n\n  explainToNum() {\n    const binSign = this.binary.slice(0, 1);\n    const binExponent = this.binary.slice(1, 12);\n    const binMantissa = this.binary.slice(12);\n    \n    let exponent = 0;\n    let explainExp: JSX.Element[] = [];\n    binExponent.split('').forEach((bit, i) => {\n      explainExp.push(\n        <span key={i}> {i === 0 ? \"\" : \"+\"} {bit} * 2<sup className=\"exponent\">{10-i}</sup></span>\n      )\n      exponent += ~~bit * Math.pow(2, 10-i);\n    });\n    explainExp = explainExp.slice(0, 3)\n      .concat([<span> .</span>, <span> .</span>, <span> .</span>, <span> .</span>])\n      .concat(explainExp.slice(8));\n    const displayBinMan: JSX.Element[] = [];\n    const explainMan: JSX.Element[] = [];\n    let mantissa = 1;\n    for(let i = 0; i < binMantissa.length; i++) {\n      if(!(i % 4)) {\n        displayBinMan.push(\n          <span key={i} className=\"mantissa\">{binMantissa.slice(i, i+4)}</span>\n        )\n      }\n      if(i<3) {\n        explainMan.push(\n          <span key={i}>{binMantissa[i]} * 2<sup className=\"mantissa\">-{i+1}</sup> + </span>\n        )\n      }\n      mantissa += ~~binMantissa[i] * Math.pow(2, -(i+1));\n    }\n\n    explainMan.push(<span>.</span>, <span>.</span>, <span>.</span>, <span>.</span>, <span> + </span>,\n    <span key={50}>{binMantissa[50]} * 2<sup className=\"mantissa\">-{51}</sup> + </span>,\n    <span key={51}>{binMantissa[51]} * 2<sup className=\"mantissa\">-{52}</sup> + </span>);\n\n    return(\n      <div className=\"displayResult\">\n        <div>\n          <span>\n            sign bit: \n            <span className=\"sign\">{\" \" + binSign + \" \"}</span>\n            thus the number is {binSign === \"0\" ? \"positive\": binSign === \"1\" ? \"negative\" : \"unknow\"}\n          </span>\n        </div>\n        <div>\n          <p>binary exponent: <span className=\"binExponent exponent\">{binExponent}</span></p>\n          <p>{explainExp} = {exponent}</p>\n          <p>exponent = {exponent} - 1023 (bias) = <span className=\"exponent\">{exponent - 1023}</span></p>\n        </div>\n        <div>\n          <p>mantissa: <span id=\"binMantissa\">{displayBinMan}</span></p>\n          <p>1 + {explainMan} = <span className=\"mantissa\">{mantissa}</span></p>\n        </div>\n        <div>\n          <p>formula:\n            <span> -1<sup className=\"sign\">sign</sup> * 2<sup>\n              <span className=\"exponent\">exp</span> - bias</sup> * <span className=\"mantissa\">mantissa</span> = number\n            </span>\n          </p>\n          <p>number = -1\n            <sup className=\"sign\">{binSign}</sup> * 2\n            <sup className=\"exponent\">{exponent - 1023}</sup> * <span className=\"mantissa\">{mantissa}</span> = {this.number}\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  explainToBits(props: any) {\n    return(\n      <div>\n        <h4>Number: {this.number}</h4>\n        <div id=\"compute\">\n          <div>\n            <h4>integer: {this.integer}</h4>\n            <div className=\"computeCont\">\n              <div id=\"intCompute\">{props.templateBin}</div>\n              {this.integer !== \"0\" ? \n                <span>\n                  <span className=\"arrow arrowUp\"></span>\n                  <span className=\"line\"></span>\n                </span>\n                : \n                <span></span>\n              }\n            </div>\n          </div>\n          <div>\n            <h4>decimal: 0.{this.decimal ? this.decimal : \"0\"}</h4>\n            <div className=\"computeCont\">\n              <div id=\"decCompute\">{props.templateDec}</div>\n              <span>\n                <span className=\"line\"></span>\n                <span className=\"arrow arrowDown\"></span>\n              </span>\n            </div>\n          </div>\n        </div>\n        <div className=\"displayResult\">\n          <p>binary integer: <span className=\"displayBin mantissa\">{this.binInt === \"\" ? \"0\" : this.binInt}</span></p>\n          <p>binary decimal: <span className=\"displayBin mantissa\">{this.binDec}</span></p>\n          <p>result: {props.templateMan}</p>\n          <p>scientific notation:\n             {this.binInt.length ? \n               <span className=\"displayBin\">\n                 {\" \" + this.binInt.slice(0, 1)}.\n                 <span className=\"mantissa\">\n                   {this.binInt.slice(1).concat(this.binDec).slice(0,30)}....\n                 </span>\n                 {\" * 2\"}\n                 <sup className=\"exponent\">{this.exponent}</sup>\n                </span>\n               :\n               <span className=\"displayBin\">\n                 {\" \" + this.binDec.slice(this.binDec.indexOf(\"1\"))[0]}.\n                 <span className=\"mantissa\">\n                   {this.binDec.slice(this.binDec.indexOf(\"1\") + 1).slice(0, 30)}....\n                 </span>\n                 {\" * 2\"}\n                 <sup className=\"exponent\">{this.exponent}</sup>\n                </span>\n             }\n          </p>\n          <p>exponent: {this.exponent} + 1023 (bias) = <span className=\"binExponent exponent\">{this.binary.slice(1,12)}</span></p>\n          <p>{this.binSign === \"1\" ? \"negative\":\"positive\"} number sign bit = <span className=\"sign\">{this.binSign}</span></p>\n          <p>binary: \n            <span className=\"displayBin\">\n              <span className=\"sign\"> {this.binary.slice(0,1)}</span>\n              <span className=\"exponent\">{this.binary.slice(1,12)}</span>\n              <span className=\"mantissa\">{this.binary.slice(12)}</span>\n            </span>\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nfunction binToNum(binary: string): any[] {\n  let sign = binary[0];\n\n  let exponent = binary.slice(1, 12).split('').reverse()\n  .reduce((acc, cur, i) => acc += cur === \"1\" ? Math.pow(2, i) : 0, 0) - 1023;\n  \n  let mantissa = binary.slice(12, binary.length).split('')\n  .reduce((acc, cur, i) => acc += cur === \"1\" ? Math.pow(2, -(i+1)) : 0, 1);\n  \n  return sign === \"0\" ? \n    [`${Math.pow(2, exponent) * mantissa}`, exponent, mantissa] :\n    [`-${Math.pow(2, exponent) * mantissa}`, exponent, mantissa];\n}\n\nfunction numToBin(number: string): any[] {\n  const arr = number[0] === \"-\" ? number.slice(1).split('.') : number.split('.');\n  const int = parseInt(arr[0], 10);\n  const dec = parseFloat(\"0.\" + arr[1]);\n  \n  const binSign = number[0] === \"-\" ? \"1\" : \"0\";\n  const [binInt, templateBin] = intToBin(int);\n  let [binDec, templateDec] = decToInt(dec);\n  templateDec.push(<p className=\"mantissa\">.</p>, <p className=\"mantissa\">.</p>, <p className=\"mantissa\">.</p>)\n  \n\n  let [exponent, templateMan] = number === \"0\" ? \n    [0, <span className=\"displayBin\"><span className=\"mantissa\">{binDec.join('')}</span></span>]\n    : findExponent(binInt, binDec);\n\n  const binExp = new Array(11).fill(\"0\").map((x, i) => {\n    if(exponent >= Math.pow(2, 10 - i)) {\n      x = \"1\";\n      exponent -= Math.pow(2, 10 - i);\n    }\n    return x;\n  })\n\n  let adjustedBinDec = binInt.length ? binDec : binDec.slice(binDec.findIndex((x) => x === \"1\") + 1);\n  let bitNum = [binSign].concat(binExp).concat(binInt.slice(1).concat(adjustedBinDec));\n\n  if(bitNum.length < 64) {\n    const fill = 64 - bitNum.length;\n    for(let i = 0; i <= fill; i++) {\n      bitNum.push('0');\n    } \n  } else if(bitNum.length > 64) {\n    bitNum = bitNum.slice(0, 64);\n  }\n\n  return [bitNum.join(''), binSign, binInt.join(''), binDec.join(''), arr[0], arr[1], templateBin, templateDec, templateMan];\n}\n\nfunction intToBin(int: number): [string[], JSX.Element[]] {\n  const arr: string[] = [];\n  let template: JSX.Element[] = [];\n  while(int) {\n    let [nextInt, rest] = [Math.floor(int/2), int%2];\n    template.push(<p>{int} = {nextInt} * 2 + <span className=\"mantissa\">{rest}</span></p>);\n    arr.push(`${rest}`);\n    int = Math.floor(nextInt);\n  }\n\n  template = template.length >= 13 ? \n      template.slice(0, 4).concat(\n        [<p className=\"mantissa\">.</p>, <p className=\"mantissa\">.</p>, <p className=\"mantissa\">.</p>]\n      ).concat(template.slice(template.length -5, template.length))\n      : template;\n  \n  return [arr.reverse(), template];\n}\n\nfunction decToInt(dec: number): [string[], JSX.Element[]] {\n  const arr = [];\n  const template = [];\n  for(let i = 0; i <= 52; i++) {\n    const newDec = dec * 2;\n    const bit = newDec >= 1 ? 1: 0;\n    if(i < 9) {\n      template.push(<p>{`${dec}`.slice(0, 5)} * 2 = <span className=\"mantissa\">{bit}</span>{`${newDec}`.slice(1, 5)}</p>)\n    }\n    arr.push(`${bit}`);\n    dec = bit ? parseFloat('0' + `${newDec}`.slice(1, 5)) : newDec;\n  }\n  return [arr, template];\n}\n\nfunction findExponent(binInt: string[], binDec: string[]): [number, JSX.Element] {\n  let templateMan;\n  let exponent;\n\n  if(binInt.length >= 1) {\n    exponent = binInt.length - 1;\n    templateMan = \n      <span className=\"displayBin\">\n        {binInt[0]}\n        <span className=\"showExp mantissa\">{binInt.slice(1).join('')}</span>\n        <span className=\"showExp\">.</span>\n        <span>{binDec ? <span className=\"mantissa\">{binDec.join('')}</span> : <span></span>}</span>\n      </span>;\n  } else {\n    exponent = binDec.findIndex((x) => x === \"1\") + 1;\n    templateMan = \n      <span>\n        0.\n        <span className=\"showExp mantissa\">{binDec.slice(0, exponent).join('')}</span>\n        <span className=\"mantissa\">{binDec.slice(exponent).join('')}</span>\n      </span>;\n    exponent = -exponent;\n  }\n  exponent += 1023;\n  return [exponent, templateMan];\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}